import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';
import {fetchName} from './counterAPI';
import {FormState} from "./models";
//
// export interface CounterState {
//   value: number;
//   status: 'idle' | 'loading' | 'failed';
// }

const initialState: FormState = {
    name: "firstname",
    status: 'idle'
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const changeNameAsync = createAsyncThunk(
    'user/fetchName',
    async (name: string) => {
        const response = await fetchName(name);
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    }
);

export const FormSlice = createSlice({
    // name is the first part of the action, key of reducers is used as the 2nd part
    // type: counter/increment ...
    name: 'user',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        changeName: (state, action: PayloadAction<any>) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            state.name = action.payload.name;
        },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(changeNameAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(changeNameAsync.fulfilled, (state, action: PayloadAction<any>) => {
                state.status = 'idle';
                state.name = action.payload.name;
            });
    },
});

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;
export const { changeName } = FormSlice.actions;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//   dispatch,
//   getState
// ) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default FormSlice.reducer;
// also has FormSlice.actions.increment() for example
